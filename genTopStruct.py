import glob
import subprocess as sp
from sys import argv
import numpy as np
import os

_author = 'levnon@Python2.7.3'

def write_struct(fname, read_files, box):
	""" 
	writes the global (gro) structure file
	@fname: gro file name tp be written
	@read_files: available .gro files for cwd
	"""
	natoms = 0
	print read_files
	
	with open(fname, "wb") as outfile:
	    for gfile in read_files:
	        with open(gfile, "rb") as infile:
	    	    readlines = infile.readlines()[2:-1]
		    natoms += len(readlines)
		    outfile.writelines(readlines)

	    outfile.write('   {} {} {}'.format(box[0], box[1], box[2])) 

	    print 'Found {} atoms. Writing final structure {} ...'.format(natoms, fname)
	    
	with open(fname, 'r+b') as outfile:
	    content = outfile.read()
	    outfile.seek(0, 0)
	    outfile.write('system {} - generated by {}\n'.format(fname.split('.')[0], _author))
	    outfile.write('{}\n'.format(natoms) + content)

def generate_top(ofname, forceField):
	""" 
	calls pdb2gmx to generate the topology all std i/o is piped,
	so this can be used for job scripts
	"""

	stderr = None
	count = 0
	fpTopGlob = open('{}.top'.format(ofname.split('.')[0]), 'w')
	fpTopGlob.write('#include "{}.ff/forcefield.itp"\n\n'.format(forceField))
	
	for pdb_file in glob.glob('*.pdb'):
		pdbID = pdb_file.split('.')[0]
		fpTopGlob.write('#include "subUnit{}/{}.top"\n'.format(count, pdbID))
		count += 1

	fpTopGlob.write('\n\n\n\n[ system ]\n')
	fpTopGlob.write('{} - generated by {}\n\n'.format(ofname.split('.')[0], _author))
		
	count = 0
	fpTopGlob.write('\n\n[ molecules ]\n')
	
	for pdb_file in glob.glob('*.pdb'):
		os.system('mkdir subUnit{}'.format(count))
		 		
		try:
			print 'Generating topology and struct files for {} using {} force field'.format(pdb_file, forceField)
			ofname = pdb_file.split('.')[0]
			process = sp.Popen(["pdb2gmx", "-f", "{}".format(pdb_file), "-p", "subUnit{}/{}.top".format(count,ofname), \
					   "-o", "{}.gro".format(ofname), '-ff',  '{}'.format(forceField)], stdin=sp.PIPE, stdout=sp.PIPE, stderr=sp.PIPE)

			stdout, stderr = process.communicate(input='3\n')
			os.system('mv *.itp subUnit{}/'.format(count))
		except:
			raise
		else:
			itpFiles = glob.glob("subUnit{}/*.itp".format(count))
			topFile = glob.glob("subUnit{}/*.top".format(count))[0] # take first top file found, shouldnt be more than one anyway
			
			itpFilesSorted = []
			fpTemp = open(topFile, 'r')
			readTemp = fpTemp.readlines()
			fpTemp.close()
			
			for line in readTemp:
				if line.find('#include') >= 0:
					itpFilesSorted.append('subUnit{}/'.format(count) + line.split()[1][1:-1].split('.')[0] + '.itp')
				
			itpFilesSorted = itpFilesSorted[1:] # neglect the first, which corresponds to the force field
			print 'Found itp chain:\n', itpFilesSorted
			print 'working on topology and itp files'
			
			for dfile in itpFilesSorted: 
				fp = open(dfile,'r')
				readlines = fp.readlines()
				fp.close()
				
				BREAK = False

				for cline, line in enumerate(readlines):
					if line.find('Protein_chain_') >= 0 and line.find('include') < 0 and line.find('File') < 0:
						proChain = line.split()[0]
						randNum = np.random.randint(10000000000)
						readlines[cline] = 'Protein_chain_{}    3\n'.format(randNum)
						
						fpTop = open(topFile, 'r')
						readLinesTop = fpTop.readlines()
						fpTop.close()

						BREAK = True

						# **IMP** Keep all three for loops independent in order not to modify the readLinesTop list order
						
						# delete #include FF line
						for clineTop, lineTOP in enumerate(readLinesTop):
							if lineTOP.find('{}.ff/forcefield.itp'.format(forceField)) >= 0:
								readLinesTop[clineTop] = '\n'

						# delete [ system ] lines (3 in total)
						for clineTop, lineTOP in enumerate(readLinesTop):
							if lineTOP.find('[ system ]') >= 0:
								readLinesTop[clineTop:clineTop+3] = '\n'

						# delete [ molecules ] lines (2 in total)
						for clineTop, lineTOP in enumerate(readLinesTop):
							if lineTOP.find('[ molecules ]') >= 0:
								readLinesTop[clineTop:clineTop+2] = '\n'
							
							
						# move [ molecules ] lines to global .top file
						for clineTop, lineTOP in enumerate(readLinesTop):
							if lineTOP.find(proChain) >= 0 and lineTOP.find('include') < 0 and lineTOP.find('File') < 0:
								readLinesTop[clineTop] = '\n'
								fpTopGlob.write('Protein_chain_{}      1\n'.format(randNum))
								fpTop = open(topFile, 'w')
								fpTop.writelines(readLinesTop)
								fpTop.close()

						fp = open(dfile, 'w')
						fp.writelines(readlines)
						fp.close()
						
					if BREAK:
						break
		yield stderr
		
		count += 1
		
	fpTopGlob.close()
	
if __name__ == '__main__':
		 
	writeStructOnly = False
	
	if len(argv) <= 5:
		raise 'force field must be supplied (e.g. charmm27) along with the box dimensions\n e.g. python genTopStruct.py HIV.gro gromos53a6 100.0 100.0 100.0 [structOnly]'
		
	fname, forceField, xLength, yLength, zLength = argv[1], argv[2], argv[3], argv[4], argv[5]
	
	if(len(argv)) == 7:
		if argv[6] == 'structOnly':
			writeStructOnly = True
			print writeStructOnly
			
	if len(fname.split('.')) <= 1:
		raise 'output file name must have an extension (e.g. .gro)'

	if not writeStructOnly:
		for stderr in generate_top(fname, forceField):
			if not stderr:
				print 'Error in topology generation'
				break

	files = glob.glob('*.gro')
	files.sort(key=os.path.getmtime)			
	write_struct(fname, files, np.array([xLength, yLength, zLength]))
		

